import React, { useState, useRef } from 'react';
import {
  Box,
  Text,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Button,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  HStack,
  IconButton,
  Textarea,
  Flex,
  Tooltip,
  Image,
  Input,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  MenuDivider,
  InputGroup,
  InputLeftElement,
  Checkbox,
  Badge,
} from '@chakra-ui/react';
import { ChevronDownIcon, SearchIcon, RepeatIcon, DeleteIcon } from '@chakra-ui/icons';
import { FaSortAlphaDown, FaSortAlphaUpAlt } from 'react-icons/fa';

import { useAuth } from '../auth'; // Adjust path if necessary

const AnotherPage = () => {
  const { isSignedIn } = useAuth();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentDescription, setCurrentDescription] = useState('');
  const [selectedRowIndex, setSelectedRowIndex] = useState(null);
  const [selectedPropertyIndex, setSelectedPropertyIndex] = useState(null);
  const [selectedTable, setSelectedTable] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [descriptionSearchText, setDescriptionSearchText] = useState('');
  const [propertySearchText, setPropertySearchText] = useState('');
  const [propertyDescriptionSearchText, setPropertyDescriptionSearchText] = useState('');
  const [sortOrder, setSortOrder] = useState(null);
  const [descriptionSortOrder, setDescriptionSortOrder] = useState(null);
  const [propertySortOrder, setPropertySortOrder] = useState(null);
  const [propertyDescriptionSortOrder, setPropertyDescriptionSortOrder] = useState(null);
  const [selectedSources, setSelectedSources] = useState([]);
  const [selectedProperties, setSelectedProperties] = useState([]);
  const [selectedDescriptions, setSelectedDescriptions] = useState([]);
  const [selectedPropertyDescriptions, setSelectedPropertyDescriptions] = useState([]);

  const inputRef = useRef();

  const [tableData, setTableData] = useState([
    {
      databaseName: 'Test_User_List',
      description: 'User list details',
      status: 'active', // Status of the main table
      properties: [
        { name: 'id', type: 'int', nullable: false, description: 'Identifier', status: 'active' },
        { name: 'username', type: 'varchar(50)', nullable: false, description: 'Username', status: 'active' },
        { name: 'email', type: 'varchar(100)', nullable: true, description: 'User email', status: 'active' },
        { name: 'password_hash', type: 'varchar(255)', nullable: false, description: 'Hashed user password', status: 'active' },
        { name: 'created_at', type: 'timestamp', nullable: false, description: 'Account creation timestamp', status: 'active' },
        { name: 'updated_at', type: 'timestamp', nullable: true, description: 'Last update timestamp', status: 'active' },
        { name: 'is_active', type: 'boolean', nullable: false, description: 'Status of the user account', status: 'active' },
        { name: 'role', type: 'varchar(20)', nullable: false, description: 'Role assigned to the user', status: 'active' },
        { name: 'profile_picture', type: 'varchar(255)', nullable: true, description: 'URL to the userâ€™s profile picture', status: 'active' },
        { name: 'last_login', type: 'timestamp', nullable: true, description: 'Timestamp of the last login', status: 'active' },
      ],
    },
  ]);

  const openModal = (index, isProperty = false) => {
    setSelectedRowIndex(index);
    if (isProperty && selectedTable !== null) {
      setSelectedPropertyIndex(index);
      setCurrentDescription(tableData[selectedTable].properties[index].description);
    } else {
      setCurrentDescription(tableData[index].description);
    }
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedRowIndex(null);
    setCurrentDescription('');
    setSelectedPropertyIndex(null);
  };

  const saveDescription = () => {
    if (selectedPropertyIndex !== null) {
      const updatedTableData = tableData.map((row, tableIndex) =>
        tableIndex === selectedTable
          ? {
              ...row,
              properties: row.properties.map((prop, propIndex) =>
                propIndex === selectedPropertyIndex ? { ...prop, description: currentDescription } : prop
              ),
            }
          : row
      );
      setTableData(updatedTableData);
    } else if (selectedRowIndex !== null) {
      const updatedTableData = tableData.map((row, index) =>
        index === selectedRowIndex ? { ...row, description: currentDescription } : row
      );
      setTableData(updatedTableData);
    }
    closeModal();
  };

  const handleTableSelect = (index) => {
    setSelectedTable(index);
  };

  const generateAIDescription = () => {
    const aiDescriptions = [
      "This table stores user information including unique identifiers, usernames, and email addresses.",
      "This table tracks user events with details such as event type and timestamp.",
      "A high-performance database for storing complex JSON data with UUID identifiers.",
      "This property is a unique identifier for each record in the table.",
      "Stores the username of the user, used for authentication and display purposes.",
      "The user's email address, used for communication and notifications.",
      "A unique identifier for each event recorded in the system.",
      "References the user associated with this event.",
      "Categorizes the type of event that occurred.",
      "Records the exact time when the event took place.",
      "A universally unique identifier for each record in the Hyperion database.",
      "Stores complex, semi-structured data in JSON format.",
      "Timestamp indicating when the record was created in the database.",
    ];

    const randomDescription = aiDescriptions[Math.floor(Math.random() * aiDescriptions.length)];
    setCurrentDescription(randomDescription);
  };

  const handleSearchChange = (e) => {
    setSearchText(e.target.value);
  };

  const handleDescriptionSearchChange = (e) => {
    setDescriptionSearchText(e.target.value);
  };

  const handlePropertySearchChange = (e) => {
    setPropertySearchText(e.target.value);
  };

  const handlePropertyDescriptionSearchChange = (e) => {
    setPropertyDescriptionSearchText(e.target.value);
  };

  const toggleSortOrder = () => {
    let sortedData;
    if (sortOrder === 'asc') {
      sortedData = [...tableData].sort((a, b) =>
        a.databaseName.toLowerCase() > b.databaseName.toLowerCase() ? -1 : 1
      );
      setSortOrder('desc');
    } else {
      sortedData = [...tableData].sort((a, b) =>
        a.databaseName.toLowerCase() < b.databaseName.toLowerCase() ? -1 : 1
      );
      setSortOrder('asc');
    }
    setTableData(sortedData);
  };

  const toggleDescriptionSortOrder = () => {
    let sortedData;
    if (descriptionSortOrder === 'asc') {
      sortedData = [...tableData].sort((a, b) =>
        a.description.toLowerCase() > b.description.toLowerCase() ? -1 : 1
      );
      setDescriptionSortOrder('desc');
    } else {
      sortedData = [...tableData].sort((a, b) =>
        a.description.toLowerCase() < b.description.toLowerCase() ? -1 : 1
      );
      setDescriptionSortOrder('asc');
    }
    setTableData(sortedData);
  };

  const togglePropertySortOrder = () => {
    let sortedData;
    if (propertySortOrder === 'asc') {
      sortedData = [...tableData[selectedTable].properties].sort((a, b) =>
        a.name.toLowerCase() > b.name.toLowerCase() ? -1 : 1
      );
      setPropertySortOrder('desc');
    } else {
      sortedData = [...tableData[selectedTable].properties].sort((a, b) =>
        a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1
      );
      setPropertySortOrder('asc');
    }

    const updatedTableData = tableData.map((row, index) =>
      index === selectedTable ? { ...row, properties: sortedData } : row
    );
    setTableData(updatedTableData);
  };

  const togglePropertyDescriptionSortOrder = () => {
    let sortedData;
    if (propertyDescriptionSortOrder === 'asc') {
      sortedData = [...tableData[selectedTable].properties].sort((a, b) =>
        a.description.toLowerCase() > b.description.toLowerCase() ? -1 : 1
      );
      setPropertyDescriptionSortOrder('desc');
    } else {
      sortedData = [...tableData[selectedTable].properties].sort((a, b) =>
        a.description.toLowerCase() < b.description.toLowerCase() ? -1 : 1
      );
      setPropertyDescriptionSortOrder('asc');
    }

    const updatedTableData = tableData.map((row, index) =>
      index === selectedTable ? { ...row, properties: sortedData } : row
    );
    setTableData(updatedTableData);
  };

  const handleCheckboxChange = (databaseName, isChecked) => {
    if (isChecked) {
      setSelectedSources([...selectedSources, databaseName]);
    } else {
      setSelectedSources(selectedSources.filter((name) => name !== databaseName));
    }
  };

  const handlePropertyCheckboxChange = (propertyName, isChecked) => {
    if (isChecked) {
      setSelectedProperties([...selectedProperties, propertyName]);
    } else {
      setSelectedProperties(selectedProperties.filter((name) => name !== propertyName));
    }
  };

  const handleDescriptionCheckboxChange = (description, isChecked) => {
    if (isChecked) {
      setSelectedDescriptions([...selectedDescriptions, description]);
    } else {
      setSelectedDescriptions(selectedDescriptions.filter((desc) => desc !== description));
    }
  };

  const handlePropertyDescriptionCheckboxChange = (description, isChecked) => {
    if (isChecked) {
      setSelectedPropertyDescriptions([...selectedPropertyDescriptions, description]);
    } else {
      setSelectedPropertyDescriptions(selectedPropertyDescriptions.filter((desc) => desc !== description));
    }
  };

  const handleDelete = (index, isProperty = false) => {
    if (isProperty && selectedTable !== null) {
      // Update the status of the selected property
      const updatedTableData = tableData.map((row, tableIndex) =>
        tableIndex === selectedTable
          ? {
              ...row,
              properties: row.properties.map((prop, propIndex) =>
                propIndex === index
                  ? { ...prop, status: prop.status === 'active' ? 'unused' : 'active' }
                  : prop
              ),
            }
          : row
      );
      setTableData(updatedTableData);
    } else if (index !== null) {
      // Update the status of the selected table
      const updatedTableData = tableData.map((row, rowIndex) =>
        rowIndex === index ? { ...row, status: row.status === 'active' ? 'unused' : 'active' } : row
      );
      setTableData(updatedTableData);
    }
  };

  // Count used and unused tables
  const usedTablesCount = tableData.filter((row) => row.status === 'active').length;
  const unusedTablesCount = tableData.length - usedTablesCount;

  // Count used and unused properties
  const usedPropertiesCount = selectedTable !== null
    ? tableData[selectedTable].properties.filter((prop) => prop.status === 'active').length
    : 0;
  const unusedPropertiesCount = selectedTable !== null
    ? tableData[selectedTable].properties.length - usedPropertiesCount
    : 0;

  // Filter logic for the table - include all rows regardless of status
  const filteredTableData = tableData.filter(
    (row) =>
      row.databaseName.toLowerCase().includes(searchText.toLowerCase()) &&
      row.description.toLowerCase().includes(descriptionSearchText.toLowerCase())
  );

  // Filter logic for the properties - include all properties regardless of status
  const filteredProperties = selectedTable !== null
    ? tableData[selectedTable].properties.filter(
        (prop) =>
          prop.name.toLowerCase().includes(propertySearchText.toLowerCase()) &&
          prop.description.toLowerCase().includes(propertyDescriptionSearchText.toLowerCase())
      )
    : [];

  return (
    <main className="flex-grow p-4">
      <Box mx="auto">
        <Text fontSize="md" color="gray.600" mb={6} align={'left'} fontFamily="Arial, sans-serif">
          This is the schema for the database. Adding a detailed description will help the AI provide more accurate responses, and we can assist in generating this description.
        </Text>

        <Flex>
          <TableContainer
            boxShadow="lg"
            borderRadius="lg"
            flex="1"
            mr={4}
            height="400px"
            overflowY="auto"
            width="50%"
            border="1px solid gray"
          >
            <Table variant="simple" size="md">
              <Thead bg="gray.100" position="sticky" top="0" zIndex="1">
                <Tr>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Tables
                          <HStack spacing={2} ml={2}>
                            <Badge
                              variant="solid"
                              colorScheme="green"
                              borderRadius="full"
                              boxSize="1rem"
                            />
                            <Text fontSize="md" fontFamily="Arial, sans-serif">{usedTablesCount}</Text>
                            <Badge
                              variant="solid"
                              colorScheme="red"
                              borderRadius="full"
                              boxSize="1rem"
                            />
                            <Text fontSize="md" fontFamily="Arial, sans-serif">{unusedTablesCount}</Text>
                          </HStack>
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={toggleSortOrder}
                              rightIcon={sortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                ref={inputRef}
                                placeholder="Filter by name.."
                                value={searchText}
                                onChange={handleSearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                onBlur={(e) => {
                                  if (e.relatedTarget) {
                                    e.preventDefault();
                                    inputRef.current.focus();
                                  }
                                }}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredTableData.map((row, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedSources.includes(row.databaseName)}
                                onChange={(e) => handleCheckboxChange(row.databaseName, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {row.databaseName}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Descriptions
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={toggleDescriptionSortOrder}
                              rightIcon={descriptionSortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                placeholder="Filter by description.."
                                value={descriptionSearchText}
                                onChange={handleDescriptionSearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredTableData.map((row, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedDescriptions.includes(row.description)}
                                onChange={(e) => handleDescriptionCheckboxChange(row.description, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {row.description || '+ Add Description'}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">Status</Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif"></Th>
                </Tr>
              </Thead>
              <Tbody>
                {filteredTableData.map((row, index) => (
                  <Tr
                    key={index}
                    _hover={{ bg: 'gray.50', '.action-icons': { opacity: 1 } }}
                    transition="all 0.2s"
                    onClick={() => handleTableSelect(index)}
                    bg={selectedTable === index ? 'blue.100' : 'inherit'}
                    cursor="pointer"
                    fontFamily="Arial, sans-serif"
                  >
                    <Td fontWeight="medium" fontFamily="Arial, sans-serif">{row.databaseName}</Td>
                    <Td fontFamily="Arial, sans-serif">
                      <Button
                        size="sm"
                        variant="link"
                        color={'gray.600'}
                        onClick={(e) => {
                          e.stopPropagation();
                          openModal(index);
                        }}
                        _hover={{ bg: 'transparent' }}
                        _focus={{ boxShadow: 'none' }}
                        fontFamily="Arial, sans-serif"
                      >
                        {row.description || '+ Add Description'}
                      </Button>
                    </Td>
                    <Td fontFamily="Arial, sans-serif">
                      <Box
                        as="span"
                        display="inline-block"
                        w="10px"
                        h="10px"
                        borderRadius="50%"
                        bg={row.status === 'active' ? 'green.500' : 'red.500'}
                        mr={2}
                      />
                      {row.status === 'active' ? 'Used' : 'Unused'}
                    </Td>
                    <Td textAlign="right" fontFamily="Arial, sans-serif">
                      <HStack
                        spacing={2}
                        justify="flex-end"
                        className="action-icons"
                        opacity={0}
                        transition="opacity 0.2s"
                      >
                        <IconButton
                          size="sm"
                          icon={row.status === 'active' ? <DeleteIcon /> : <RepeatIcon />}
                          aria-label={row.status === 'active' ? "Delete" : "Restore"}
                          color={row.status === 'active' ? "red.500" : "green.500"}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDelete(index); // Call handleDelete for the main table
                          }}
                          fontFamily="Arial, sans-serif"
                        />
                      </HStack>
                    </Td>
                  </Tr>
                ))}
              </Tbody>
            </Table>
          </TableContainer>

          <TableContainer
            boxShadow="lg"
            borderRadius="lg"
            flex="1"
            height="400px"
            overflowY="auto"
            width="50%"
            border="1px solid gray"
          >
            <Table variant="simple" size="md">
              <Thead bg="gray.100" position="sticky" top="0" zIndex="1">
                <Tr>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Properties
                          <HStack spacing={2} ml={2}>
                            <Badge
                              variant="solid"
                              colorScheme="green"
                              borderRadius="full"
                              boxSize="1rem"
                            />
                            <Text fontSize="md" fontFamily="Arial, sans-serif">{usedPropertiesCount}</Text>
                            <Badge
                              variant="solid"
                              colorScheme="red"
                              borderRadius="full"
                              boxSize="1rem"
                            />
                            <Text fontSize="md" fontFamily="Arial, sans-serif">{unusedPropertiesCount}</Text>
                          </HStack>
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={togglePropertySortOrder}
                              rightIcon={propertySortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                placeholder="Filter by property.."
                                value={propertySearchText}
                                onChange={handlePropertySearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredProperties.map((prop, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedProperties.includes(prop.name)}
                                onChange={(e) => handlePropertyCheckboxChange(prop.name, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {prop.name}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Descriptions
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={togglePropertyDescriptionSortOrder}
                              rightIcon={propertyDescriptionSortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                placeholder="Filter by description.."
                                value={propertyDescriptionSearchText}
                                onChange={handlePropertyDescriptionSearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredProperties.map((prop, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedPropertyDescriptions.includes(prop.description)}
                                onChange={(e) => handlePropertyDescriptionCheckboxChange(prop.description, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {prop.description || '+ Add Description'}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">Status</Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif"></Th>
                </Tr>
              </Thead>
              <Tbody>
                {filteredProperties.map((prop, index) => (
                  <Tr
                    key={index}
                    _hover={{ bg: 'gray.50', '.action-icons': { opacity: 1 } }}
                    transition="all 0.2s"
                    fontFamily="Arial, sans-serif"
                  >
                    <Td fontWeight="medium" fontFamily="Arial, sans-serif">{prop.name}</Td>
                    <Td fontFamily="Arial, sans-serif">
                      <Button
                        size="sm"
                        variant="link"
                        color={'gray.600'}
                        onClick={(e) => {
                          e.stopPropagation();
                          openModal(index, true);
                        }}
                        _hover={{ bg: 'transparent' }}
                        _focus={{ boxShadow: 'none' }}
                        fontFamily="Arial, sans-serif"
                      >
                        {prop.description || '+ Add Description'}
                      </Button>
                    </Td>
                    <Td fontFamily="Arial, sans-serif">
                      <Box
                        as="span"
                        display="inline-block"
                        w="10px"
                        h="10px"
                        borderRadius="50%"
                        bg={prop.status === 'active' ? 'green.500' : 'red.500'}
                        mr={2}
                      />
                      {prop.status === 'active' ? 'Used' : 'Unused'}
                    </Td>
                    <Td textAlign="right" fontFamily="Arial, sans-serif">
                      <HStack
                        spacing={2}
                        justify="flex-end"
                        className="action-icons"
                        opacity={0}
                        transition="opacity 0.2s"
                      >
                        <IconButton
                          size="sm"
                          icon={prop.status === 'active' ? <DeleteIcon /> : <RepeatIcon />}
                          aria-label={prop.status === 'active' ? "Delete" : "Restore"}
                          color={prop.status === 'active' ? "red.500" : "green.500"}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDelete(index, true); // Call handleDelete for properties
                          }}
                          fontFamily="Arial, sans-serif"
                        />
                      </HStack>
                    </Td>
                  </Tr>
                ))}
              </Tbody>
            </Table>
          </TableContainer>
        </Flex>

        <Modal isOpen={isModalOpen} onClose={closeModal}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader fontFamily="Arial, sans-serif">Update Description</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <Textarea
                value={currentDescription}
                onChange={(e) => setCurrentDescription(e.target.value)}
                placeholder="Enter description"
                fontFamily="Arial, sans-serif"
              />
            </ModalBody>

            <ModalFooter>
              <HStack spacing={4} w="full" justify="space-between">
                <Tooltip label="Generate description using AI" aria-label="A tooltip" hasArrow placement="bottom-start">
                  <Button
                    onClick={generateAIDescription}
                    leftIcon={<Image src="/ai-logo.png" boxSize="30px" alt="AI Icon" />}
                    bg="transparent"
                    _hover={{ bg: 'transparent' }}
                    _active={{ bg: 'transparent' }}
                    fontFamily="Arial, sans-serif"
                  />
                </Tooltip>
                <div>
                  <Button variant="ghost" onClick={closeModal} mr={5} fontFamily="Arial, sans-serif">
                    Cancel
                  </Button>
                  <Button bg="black" color="white" _hover={{ bg: 'gray.800' }} onClick={saveDescription} fontFamily="Arial, sans-serif">
                    Save
                  </Button>
                </div>
              </HStack>
            </ModalFooter>
          </ModalContent>
        </Modal>
      </Box>
    </main>
  );
};

export default AnotherPage;
