// ConnectForm.jsx
import React, { useState, useRef, useCallback } from 'react';
import {
  FormControl,
  FormLabel,
  Input,
  InputGroup,
  InputRightElement,
  Button,
  VStack,
  HStack,
  Box,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  useColorModeValue,
  useToast,
  Image,
  Text,
  IconButton,
  Progress,
  Switch,
  Tooltip,
  Icon,
  Spinner,
  Link,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  useDisclosure,
  AlertDialog,
  AlertDialogOverlay,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogBody,
  AlertDialogFooter,
} from '@chakra-ui/react';
import axios from 'axios';
import { ViewIcon, ViewOffIcon, ChevronDownIcon, ArrowBackIcon, InfoOutlineIcon } from '@chakra-ui/icons';
import { FiUpload } from 'react-icons/fi';

const ConnectForm = ({ onBack, onSaveSuccess }) => {
  const [showPassword, setShowPassword] = useState(false);
  const [isEnabled, setIsEnabled] = useState(false);
  const [loading, setLoading] = useState(false);
  const [isConfirmOpen, setIsConfirmOpen] = useState(false);
  const cancelRef = useRef();

  const [formData, setFormData] = useState({
    databaseServer: '',
    username: '',
    password: '',
    account: '',
    warehouse: '',
    role: '',
    database: '',
    serviceAccountKey: null,
    projectId: '',
    jsonParsedData: null,
    bigQueryDatabase: '',
  });

  const [selectedFile, setSelectedFile] = useState(null);
  const [activeStep, setActiveStep] = useState(0);

  const toast = useToast();
  const boxBgColor = useColorModeValue('white', 'gray.800');

  const { isOpen, onOpen, onClose } = useDisclosure();

  const databaseServers = [
    { value: 'BigQuery', label: 'BigQuery', logo: '/bigquery.png' },
    { value: 'SnowFlake', label: 'SnowFlake', logo: '/Snowflake.png' },
  ];

  const sampleJsonStructure = {
    type: 'service_account',
    project_id: 'your-project-id',
    private_key_id: 'your-private-key-id',
    private_key: '-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcw...END PRIVATE KEY-----\n',
    client_email: 'your-service-account-email@your-project-id.iam.gserviceaccount.com',
    client_id: 'your-client-id',
    auth_uri: 'https://accounts.google.com/o/oauth2/auth',
    token_uri: 'https://oauth2.googleapis.com/token',
    auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',
    client_x509_cert_url: 'https://www.googleapis.com/robot/v1/metadata/x509/your-service-account-email@your-project-id.iam.gserviceaccount.com',
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setSelectedFile(file);
    const reader = new FileReader();

    reader.onload = (event) => {
      try {
        const json = JSON.parse(event.target.result);

        // Validate required fields in JSON
        if (!json.project_id || !json.client_email || !json.client_id || !json.private_key_id) {
          throw new Error('JSON file is missing required fields.');
        }

        setFormData((prev) => ({
          ...prev,
          serviceAccountKey: file,
          projectId: json.project_id,
          jsonParsedData: json,
        }));
        toast({
          title: 'File Uploaded',
          description: 'The service account JSON file has been successfully parsed.',
          status: 'success',
          duration: 5000,
          isClosable: true,
          position: 'top-right',
        });
      } catch (error) {
        toast({
          title: 'File Upload Error',
          description: error.message || 'Failed to parse the JSON file. Please ensure it is a valid BigQuery service account key.',
          status: 'error',
          duration: 5000,
          isClosable: true,
          position: 'top-right',
        });
      }
    };

    reader.onerror = () => {
      toast({
        title: 'File Read Error',
        description: 'There was an error reading the file. Please try again.',
        status: 'error',
        duration: 5000,
        isClosable: true,
        position: 'top-right',
      });
    };

    reader.readAsText(file);
  };

// Corrected handleSave function with changes highlighted
const handleSave = useCallback(async () => {
  const {
    databaseServer,
    username,
    password,
    account,
    warehouse,
    role,
    database,
    serviceAccountKey,
    projectId,
    jsonParsedData,
    bigQueryDatabase,
  } = formData;

  // Validate form data
  if (
    !databaseServer ||
    (databaseServer === 'SnowFlake' &&
      (!username || !password || !account || !warehouse || !role || !database)) ||
    (databaseServer === 'BigQuery' &&
      (!serviceAccountKey || !projectId || !bigQueryDatabase))
  ) {
    toast({
      title: 'Form Incomplete',
      description: 'Please fill out all required fields.',
      status: 'error',
      duration: 5000,
      isClosable: true,
      position: 'top-right',
    });
    return;
  }

  setLoading(true);

  const commonData = {
    'Organisation ID': new Date().getTime().toString(),
    'Database Server': databaseServer,
    Database: bigQueryDatabase || database,
    serviceAccountKey: jsonParsedData,
  };

  const airtableData = {
    fields: {
      'Organisation ID': commonData['Organisation ID'],
      'Database Server': commonData['Database Server'],
      Database: commonData['Database'],
      ...(databaseServer === 'SnowFlake' && {
        Username: username,
        Password: password,
        Account: account,
        Warehouse: warehouse,
        Role: role,
        Database: database,
      }),
      ...(databaseServer === 'BigQuery' && {
        'Project ID': projectId,
        'Client Email': jsonParsedData.client_email,
        'Client ID': jsonParsedData.client_id,
        'Private Key ID': jsonParsedData.private_key_id,
        'Private Key': jsonParsedData.private_key,
        'Auth URI': jsonParsedData.auth_uri,
        'Token URI': jsonParsedData.token_uri,
        'Auth Provider URL': jsonParsedData.auth_provider_x509_cert_url,
        'Client Cert URL': jsonParsedData.client_x509_cert_url,
      }),
      State: isEnabled ? 'Active' : 'Inactive',
      CreatedAt: new Date().toISOString(),
      UpdatedAt: new Date().toISOString(),
    },
  };

  try {
    // Send data to Airtable
    const airtableResponse = await axios.post(
      `https://api.airtable.com/v0/app4ZQ9jav2XzNIv9/DatabaseConfig`,
      airtableData,
      {
        headers: {
          Authorization: `Bearer pat7yphXE6tN9GRZo.4fa31f031768b1799770a8c2a9254d0f5cbf879cbe5dc2c6d7469ff11ec5cc89`,
          'Content-Type': 'application/json',
        },
      }
    );

    if (airtableResponse.status === 200) {
      toast({
        title: 'Configuration Saved',
        description: 'Your database configuration has been saved to Airtable.',
        status: 'success',
        duration: 5000,
        isClosable: true,
        position: 'top-right',
      });

      // Immediately switch view after Airtable save
      if (onSaveSuccess) {
        onSaveSuccess();
      }
      onBack();
    }

    // Schedule Flask API calls to run in the background
    setTimeout(async () => {
      try {
        if (databaseServer === 'SnowFlake') {
          await axios.post('http://localhost:5003/save-schema', {
            Username: username,
            Password: password,
            Account: account,
            Database: database,
            Warehouse: warehouse,
            Role: role,
            'Organisation ID': commonData['Organisation ID'],
            'Database Server': 'SNOWFLAKE',
          });

          await axios.post('http://localhost:5004/save_schema', {
            Username: username,
            Password: password,
            Account: account,
            Database: database,
            Warehouse: warehouse,
            Role: role,
            SNOWFLAKE_DATABASE: database,
            'Organisation ID': commonData['Organisation ID'],
            'Database Server': 'SNOWFLAKE',
          });

          await axios.post('http://localhost:5005/save-column-schema', {
            Username: username,
            Password: password,
            Account: account,
            Database: database,
            Warehouse: warehouse,
            Role: role,
            'Organisation ID': commonData['Organisation ID'],
            'Database Server': 'SNOWFLAKE',
          });
        } else if (databaseServer === 'BigQuery') {
          await axios.post('/api/save-bq-schema', commonData);
          await axios.post('http://localhost:5001/save-bq-tables', commonData);
          await axios.post('http://localhost:5002/save-bq-columns', commonData);
        }
      } catch (flaskError) {
        console.error('Error in Flask API calls:', flaskError);
        toast({
          title: 'Flask Error',
          // Ensure the error message is a string
          description: flaskError?.message || JSON.stringify(flaskError),
          status: 'error',
          duration: 5000,
          isClosable: true,
          position: 'top-right',
        });
      }
    }, 0); // Run Flask calls asynchronously

  } catch (error) {
    console.error('Error saving data:', error);
    toast({
      title: 'Error',
      // Corrected: Ensure the error message is a string, not an object
      description: error?.message || JSON.stringify(error),
      status: 'error',
      duration: 5000,
      isClosable: true,
      position: 'top-right',
    });
  } finally {
    setLoading(false);
    setIsConfirmOpen(false); // Ensure modal is closed
  }
}, [formData, isEnabled, onBack, onSaveSuccess, toast]);

  
  const handleConfirmSave = () => {
    setIsConfirmOpen(true);
  };

  const handleCancel = () => {
    onBack();
  };

  const handleMenuSelect = (value) => {
    setFormData((prev) => ({ ...prev, databaseServer: value }));
    setActiveStep(1);
  };

  const steps = [
    'Select Database Server',
    formData.databaseServer === 'BigQuery' ? 'BigQuery Configuration' : 'SnowFlake Configuration',
    'Review & Save',
  ];

  const downloadSampleJson = () => {
    const blob = new Blob([JSON.stringify(sampleJsonStructure, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'sample-bigquery-structure.json';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <Box width="70%" margin="auto" padding="6" pt={10} borderRadius="lg" boxShadow="xl" bg={boxBgColor} mt={5}>
      <VStack spacing={8} align="stretch">
        <HStack justify="flex-start" spacing={4}>
          <IconButton icon={<ArrowBackIcon />} aria-label="Go back" onClick={handleCancel} variant="ghost" />
          <Text fontSize="lg" fontWeight="bold">
            Connect to Database
          </Text>
        </HStack>

        <Progress value={(activeStep / (steps.length - 1)) * 100} size="xs" colorScheme="blue" />

        {activeStep === 0 && (
          <FormControl id="database-server" isRequired>
            <FormLabel>Select Database Server</FormLabel>
            <Menu>
              <MenuButton
                as={Button}
                size="lg"
                width="100%"
                rightIcon={<ChevronDownIcon />}
                textAlign="left"
                variant="outline"
                bg="white"
                _hover={{ bg: 'white' }}
                _focus={{ boxShadow: 'outline', bg: 'white' }}
                fontSize="md"
                fontWeight="normal"
                padding="0.875rem 1rem"
              >
                {formData.databaseServer || 'Select database server'}
              </MenuButton>
              <MenuList bg="white">
                {databaseServers.map((server) => (
                  <MenuItem
                    key={server.value}
                    onClick={() => handleMenuSelect(server.value)}
                    _hover={{ bg: 'gray.100' }}
                  >
                    <HStack>
                      <Image src={server.logo} alt={server.label} boxSize="20px" />
                      <Text>{server.label}</Text>
                    </HStack>
                  </MenuItem>
                ))}
              </MenuList>
            </Menu>
          </FormControl>
        )}

        {activeStep === 1 && formData.databaseServer === 'SnowFlake' && (
          <VStack spacing={6} align="stretch">
            <HStack spacing={6}>
              <FormControl id="username" isRequired>
                <FormLabel>
                  Username
                  <Tooltip label="Your SnowFlake account username" fontSize="md">
                    <InfoOutlineIcon ml={2} />
                  </Tooltip>
                </FormLabel>
                <Input
                  placeholder="Enter username"
                  size="lg"
                  value={formData.username}
                  onChange={(e) => setFormData((prev) => ({ ...prev, username: e.target.value }))}
                />
              </FormControl>
              <FormControl id="password" isRequired>
                <FormLabel>Password</FormLabel>
                <InputGroup size="lg">
                  <Input
                    type={showPassword ? 'text' : 'password'}
                    placeholder="Enter password"
                    value={formData.password}
                    onChange={(e) => setFormData((prev) => ({ ...prev, password: e.target.value }))}
                  />
                  <InputRightElement width="4.5rem">
                    <Button h="1.75rem" size="sm" onClick={() => setShowPassword(!showPassword)}>
                      {showPassword ? <ViewOffIcon /> : <ViewIcon />}
                    </Button>
                  </InputRightElement>
                </InputGroup>
              </FormControl>
            </HStack>
            <HStack spacing={6}>
              <FormControl id="account" isRequired>
                <FormLabel>Account</FormLabel>
                <Input
                  placeholder="Enter account"
                  size="lg"
                  value={formData.account}
                  onChange={(e) => setFormData((prev) => ({ ...prev, account: e.target.value }))}
                />
              </FormControl>
              <FormControl id="warehouse" isRequired>
                <FormLabel>Warehouse</FormLabel>
                <Input
                  placeholder="Enter warehouse"
                  size="lg"
                  value={formData.warehouse}
                  onChange={(e) => setFormData((prev) => ({ ...prev, warehouse: e.target.value }))}
                />
              </FormControl>
            </HStack>
            <HStack spacing={6}>
              <FormControl id="role" isRequired>
                <FormLabel>
                  Role
                  <Tooltip label="The role you want to use in SnowFlake" fontSize="md">
                    <InfoOutlineIcon ml={2} />
                  </Tooltip>
                </FormLabel>
                <Input
                  placeholder="Enter role"
                  size="lg"
                  value={formData.role}
                  onChange={(e) => setFormData((prev) => ({ ...prev, role: e.target.value }))}
                />
              </FormControl>
              <FormControl id="database" isRequired>
                <FormLabel>Database</FormLabel>
                <Input
                  placeholder="Enter database"
                  size="lg"
                  value={formData.database}
                  onChange={(e) => setFormData((prev) => ({ ...prev, database: e.target.value }))}
                />
              </FormControl>
            </HStack>
          </VStack>
        )}

        {activeStep === 1 && formData.databaseServer === 'BigQuery' && (
          <VStack spacing={6} align="stretch">
            <FormControl id="bigQueryDatabase" isRequired>
              <FormLabel>Database</FormLabel>
              <Input
                placeholder="Enter BigQuery database"
                size="lg"
                value={formData.bigQueryDatabase}
                onChange={(e) => setFormData((prev) => ({ ...prev, bigQueryDatabase: e.target.value }))}
              />
            </FormControl>
            <FormControl id="service-account-key" isRequired>
              <FormLabel mb={2}>
                Service Account Key (JSON)
                <Tooltip label="Upload your BigQuery service account key in JSON format" fontSize="sm">
                  <InfoOutlineIcon ml={2} boxSize={3} />
                </Tooltip>
              </FormLabel>
              <Box
                borderWidth={2}
                borderRadius="md"
                borderStyle="dashed"
                borderColor="gray.300"
                p={4}
                textAlign="center"
                transition="all 0.3s"
                _hover={{ borderColor: 'blue.500' }}
              >
                <Input
                  type="file"
                  accept=".json"
                  onChange={handleFileChange}
                  display="none"
                  id="service-account-key-upload"
                />
                <Button
                  as="label"
                  htmlFor="service-account-key-upload"
                  variant="ghost"
                  colorScheme="blue"
                  size="md"
                  leftIcon={<Icon as={FiUpload} />}
                  mb={2}
                >
                  {selectedFile ? 'Change File' : 'Select JSON File'}
                </Button>
                <Text fontSize="sm" color="gray.500">
                  {selectedFile ? selectedFile.name : 'No file selected'}
                </Text>
                <Link color="blue.500" onClick={onOpen} display="flex" alignItems="center" mt={2}>
                  <Icon as={InfoOutlineIcon} mr={1} /> View Sample JSON
                </Link>
              </Box>
            </FormControl>
          </VStack>
        )}

        {activeStep === 2 && (
          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={4}>
              Review Your Configuration
            </Text>
            <VStack align="stretch" spacing={4}>
              <Box p={4} bg="gray.100" borderRadius="md">
                <Text>Database Server: {formData.databaseServer}</Text>
                {formData.databaseServer === 'SnowFlake' && (
                  <>
                    <Text>Username: {formData.username}</Text>
                    <Text>Account: {formData.account}</Text>
                    <Text>Warehouse: {formData.warehouse}</Text>
                    <Text>Role: {formData.role}</Text>
                    <Text>Database: {formData.database}</Text>
                  </>
                )}
                {formData.databaseServer === 'BigQuery' && (
                  <>
                    <Text>Project ID: {formData.projectId}</Text>
                    <Text>Database: {formData.bigQueryDatabase}</Text>
                    <Text>Service Account Key: {formData.serviceAccountKey?.name}</Text>
                  </>
                )}
              </Box>
              <FormControl display="flex" alignItems="center">
                <FormLabel htmlFor="enable-connection" mb="0">
                  Enable Connection
                </FormLabel>
                <Switch
                  id="enable-connection"
                  isChecked={isEnabled}
                  onChange={() => setIsEnabled(!isEnabled)}
                />
              </FormControl>
            </VStack>
          </Box>
        )}

        <HStack spacing={6} justify="flex-end">
          {activeStep > 0 && (
            <Button bg="transparent" _hover={{ bg: 'transparent' }} size="md" onClick={() => setActiveStep(activeStep - 1)}>
              Back
            </Button>
          )}
          {activeStep < 2 ? (
            <Button colorScheme="blue" size="md" onClick={() => setActiveStep(activeStep + 1)} isDisabled={loading}>
              {loading ? <Spinner size="sm" /> : 'Next'}
            </Button>
          ) : (
            <Button colorScheme="blue" size="md" onClick={handleConfirmSave} isDisabled={loading}>
              {loading ? <Spinner size="sm" /> : 'Save'}
            </Button>
          )}
        </HStack>
      </VStack>

      {/* Modal for Sample JSON Structure */}
      <Modal isOpen={isOpen} onClose={onClose} isCentered size="lg">
        <ModalOverlay />
        <ModalContent borderRadius="md" boxShadow="2xl">
          <ModalHeader fontSize="lg" fontWeight="bold" bg="blue.500" color="white" borderTopRadius="md" p={4}>
            Sample JSON Structure for BigQuery
          </ModalHeader>
          <ModalCloseButton color="white" />
          <ModalBody bg="gray.50" p={6}>
            <Box bg="white" p={4} borderRadius="md" border="1px solid" borderColor="gray.200" overflowX="auto">
              <Text as="pre" fontSize="sm" whiteSpace="pre-wrap">
                {JSON.stringify(sampleJsonStructure, null, 2)}
              </Text>
            </Box>
          </ModalBody>
          <ModalFooter>
            <Button colorScheme="blue" onClick={downloadSampleJson} mr={3}>
              Download Sample JSON
            </Button>
            <Button onClick={onClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Confirmation Dialog */}
      <AlertDialog
        isOpen={isConfirmOpen}
        leastDestructiveRef={cancelRef}
        onClose={() => setIsConfirmOpen(false)}
      >
        <AlertDialogOverlay>
          <AlertDialogContent>
            <AlertDialogHeader fontSize="lg" fontWeight="bold">
              Confirm Save
            </AlertDialogHeader>

            <AlertDialogBody>
              Creating a new configuration will save the current settings. Do you want to proceed?
            </AlertDialogBody>

            <AlertDialogFooter>
              <Button
                ref={cancelRef}
                onClick={() => setIsConfirmOpen(false)}
                bg="white"
                border="1px solid"
                borderColor="#32343A"
                color="#32343A"
                _hover={{ bg: '#f7f7f7' }}
                _active={{ bg: '#e2e2e2' }}
              >
                Cancel
              </Button>
              <Button
                onClick={handleSave}
                ml={3}
                bg="#32343A"
                color="white"
                _hover={{ bg: '#2b2d33' }}
                _active={{ bg: '#232529' }}
              >
                Yes, Save
              </Button>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialogOverlay>
      </AlertDialog>
    </Box>
  );
};

export default ConnectForm;
