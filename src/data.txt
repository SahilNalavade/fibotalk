 const [tableData, setTableData] = useState([
    {
      databaseName: 'Test_User_List',
      description: 'User list details',
      properties: [
        { name: 'id', type: 'int', nullable: false, description: 'Identifier' },
        { name: 'username', type: 'varchar(50)', nullable: false, description: 'Username' },
        { name: 'email', type: 'varchar(100)', nullable: true, description: 'User email' },
        { name: 'password_hash', type: 'varchar(255)', nullable: false, description: 'Hashed user password' },
        { name: 'created_at', type: 'timestamp', nullable: false, description: 'Account creation timestamp' },
        { name: 'updated_at', type: 'timestamp', nullable: true, description: 'Last update timestamp' },
        { name: 'is_active', type: 'boolean', nullable: false, description: 'Status of the user account' },
        { name: 'role', type: 'varchar(20)', nullable: false, description: 'Role assigned to the user' },
        { name: 'profile_picture', type: 'varchar(255)', nullable: true, description: 'URL to the userâ€™s profile picture' },
        { name: 'last_login', type: 'timestamp', nullable: true, description: 'Timestamp of the last login' },
      ],
    },
    {
      databaseName: 'User_Event_Track',
      description: 'User event tracking',
      properties: [
        { name: 'event_id', type: 'int', nullable: false, description: 'Event Identifier' },
        { name: 'user_id', type: 'int', nullable: false, description: 'User Identifier' },
        { name: 'event_type', type: 'varchar(50)', nullable: false, description: 'Type of Event' },
        { name: 'timestamp', type: 'datetime', nullable: false, description: 'Event Timestamp' },
        { name: 'ip_address', type: 'varchar(45)', nullable: true, description: 'IP address from where the event was triggered' },
        { name: 'device', type: 'varchar(100)', nullable: true, description: 'Device type used during the event' },
        { name: 'location', type: 'varchar(255)', nullable: true, description: 'Location from where the event occurred' },
        { name: 'browser', type: 'varchar(100)', nullable: true, description: 'Browser used during the event' },
        { name: 'referrer', type: 'varchar(255)', nullable: true, description: 'Referrer URL for the event' },
      ],
    },
    {
      databaseName: 'HyperionDB',
      description: 'High-performance database',
      properties: [
        { name: 'hyperion_id', type: 'uuid', nullable: false, description: 'UUID' },
        { name: 'data', type: 'jsonb', nullable: true, description: 'Data in JSONB format' },
        { name: 'created_at', type: 'timestamp', nullable: false, description: 'Creation Timestamp' },
        { name: 'updated_at', type: 'timestamp', nullable: true, description: 'Last updated timestamp' },
        { name: 'status', type: 'varchar(20)', nullable: false, description: 'Current status of the record' },
        { name: 'tags', type: 'varchar(255)', nullable: true, description: 'Tags associated with the record' },
        { name: 'owner_id', type: 'int', nullable: false, description: 'ID of the user who created the record' },
        { name: 'version', type: 'int', nullable: true, description: 'Version number of the record' },
        { name: 'encrypted', type: 'boolean', nullable: false, description: 'Indicates if the data is encrypted' },
        { name: 'is_archived', type: 'boolean', nullable: false, description: 'Indicates if the record is archived' },
      ],
    },
    {
      databaseName: 'Product_Catalog',
      description: 'Details of products available in the catalog',
      properties: [
        { name: 'product_id', type: 'int', nullable: false, description: 'Unique identifier for the product' },
        { name: 'name', type: 'varchar(100)', nullable: false, description: 'Name of the product' },
        { name: 'description', type: 'text', nullable: true, description: 'Description of the product' },
        { name: 'price', type: 'decimal(10,2)', nullable: false, description: 'Price of the product' },
        { name: 'currency', type: 'varchar(3)', nullable: false, description: 'Currency code (e.g., USD)' },
        { name: 'in_stock', type: 'boolean', nullable: false, description: 'Availability status of the product' },
        { name: 'category_id', type: 'int', nullable: false, description: 'Category identifier' },
        { name: 'created_at', type: 'timestamp', nullable: false, description: 'Timestamp when the product was added' },
        { name: 'updated_at', type: 'timestamp', nullable: true, description: 'Timestamp when the product was last updated' },
      ],
    },
    {
      databaseName: 'Order_History',
      description: 'Historical record of customer orders',
      properties: [
        { name: 'order_id', type: 'int', nullable: false, description: 'Unique identifier for the order' },
        { name: 'customer_id', type: 'int', nullable: false, description: 'Identifier of the customer who placed the order' },
        { name: 'order_date', type: 'datetime', nullable: false, description: 'Date and time when the order was placed' },
        { name: 'total_amount', type: 'decimal(10,2)', nullable: false, description: 'Total amount of the order' },
        { name: 'currency', type: 'varchar(3)', nullable: false, description: 'Currency code (e.g., USD)' },
        { name: 'status', type: 'varchar(20)', nullable: false, description: 'Current status of the order' },
        { name: 'shipping_address', type: 'text', nullable: false, description: 'Shipping address for the order' },
        { name: 'billing_address', type: 'text', nullable: false, description: 'Billing address for the order' },
        { name: 'payment_method', type: 'varchar(50)', nullable: false, description: 'Payment method used for the order' },
        { name: 'created_at', type: 'timestamp', nullable: false, description: 'Timestamp when the order was created' },
        { name: 'updated_at', type: 'timestamp', nullable: true, description: 'Timestamp when the order was last updated' },
      ],
    },
    {
      databaseName: 'Customer_Support_Tickets',
      description: 'Records of customer support tickets',
      properties: [
        { name: 'ticket_id', type: 'int', nullable: false, description: 'Unique identifier for the support ticket' },
        { name: 'customer_id', type: 'int', nullable: false, description: 'Identifier of the customer who opened the ticket' },
        { name: 'issue_description', type: 'text', nullable: false, description: 'Detailed description of the issue' },
        { name: 'status', type: 'varchar(20)', nullable: false, description: 'Current status of the ticket' },
        { name: 'priority', type: 'varchar(10)', nullable: false, description: 'Priority level of the ticket (e.g., High, Medium, Low)' },
        { name: 'assigned_to', type: 'int', nullable: true, description: 'ID of the support agent assigned to the ticket' },
        { name: 'created_at', type: 'timestamp', nullable: false, description: 'Timestamp when the ticket was created' },
        { name: 'updated_at', type: 'timestamp', nullable: true, description: 'Timestamp when the ticket was last updated' },
        { name: 'resolved_at', type: 'timestamp', nullable: true, description: 'Timestamp when the ticket was resolved' },
      ],
    },
  ]);

  --------
  import React, { useState, useRef } from 'react';
import {
  Box,
  Text,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Button,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  HStack,
  IconButton,
  Textarea,
  Flex,
  Tooltip,
  Image,
  Input,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  MenuDivider,
  InputGroup,
  InputLeftElement,
  Checkbox,
} from '@chakra-ui/react';
import { ChevronDownIcon, SearchIcon, RepeatIcon, DeleteIcon } from '@chakra-ui/icons';
import { FaSortAlphaDown, FaSortAlphaUpAlt } from 'react-icons/fa';

import { useAuth } from '../auth'; // Adjust path if necessary

const AnotherPage = () => {
  const { isSignedIn } = useAuth();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentDescription, setCurrentDescription] = useState('');
  const [selectedRowIndex, setSelectedRowIndex] = useState(null);
  const [selectedPropertyIndex, setSelectedPropertyIndex] = useState(null);
  const [selectedTable, setSelectedTable] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [descriptionSearchText, setDescriptionSearchText] = useState('');
  const [propertySearchText, setPropertySearchText] = useState('');
  const [sortOrder, setSortOrder] = useState(null);
  const [descriptionSortOrder, setDescriptionSortOrder] = useState(null);
  const [propertySortOrder, setPropertySortOrder] = useState(null);
  const [selectedSources, setSelectedSources] = useState([]);
  const [selectedProperties, setSelectedProperties] = useState([]);
  const [selectedDescriptions, setSelectedDescriptions] = useState([]);

  const inputRef = useRef();

  const [tableData, setTableData] = useState([
    {
      databaseName: 'Test_User_List',
      description: 'User list details',
      properties: [
        { name: 'id', type: 'int', nullable: false, description: 'Identifier' },
        { name: 'username', type: 'varchar(50)', nullable: false, description: 'Username' },
        { name: 'email', type: 'varchar(100)', nullable: true, description: 'User email' },
        { name: 'password_hash', type: 'varchar(255)', nullable: false, description: 'Hashed user password' },
        { name: 'created_at', type: 'timestamp', nullable: false, description: 'Account creation timestamp' },
        { name: 'updated_at', type: 'timestamp', nullable: true, description: 'Last update timestamp' },
        { name: 'is_active', type: 'boolean', nullable: false, description: 'Status of the user account' },
        { name: 'role', type: 'varchar(20)', nullable: false, description: 'Role assigned to the user' },
        { name: 'profile_picture', type: 'varchar(255)', nullable: true, description: 'URL to the userâ€™s profile picture' },
        { name: 'last_login', type: 'timestamp', nullable: true, description: 'Timestamp of the last login' },
      ],
    },
  ]);

  const openModal = (index, isProperty = false) => {
    setSelectedRowIndex(index);
    if (isProperty && selectedTable !== null) {
      setSelectedPropertyIndex(index);
      setCurrentDescription(tableData[selectedTable].properties[index].description);
    } else {
      setCurrentDescription(tableData[index].description);
    }
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedRowIndex(null);
    setCurrentDescription('');
    setSelectedPropertyIndex(null);
  };

  const saveDescription = () => {
    if (selectedPropertyIndex !== null) {
      const updatedTableData = tableData.map((row, tableIndex) =>
        tableIndex === selectedTable
          ? {
              ...row,
              properties: row.properties.map((prop, propIndex) =>
                propIndex === selectedPropertyIndex ? { ...prop, description: currentDescription } : prop
              ),
            }
          : row
      );
      setTableData(updatedTableData);
    } else if (selectedRowIndex !== null) {
      const updatedTableData = tableData.map((row, index) =>
        index === selectedRowIndex ? { ...row, description: currentDescription } : row
      );
      setTableData(updatedTableData);
    }
    closeModal();
  };

  const handleRefresh = (index, isProperty = false) => {
    console.log(`Refreshing ${isProperty ? 'property' : 'row'} ${index}`);
  };

  const handleDelete = (index, isProperty = false) => {
    console.log(`Deleting ${isProperty ? 'property' : 'row'} ${index}`);
    if (isProperty && selectedTable !== null) {
      const updatedTableData = tableData.map((row, tableIndex) =>
        tableIndex === selectedTable
          ? { ...row, properties: row.properties.filter((_, propIndex) => propIndex !== index) }
          : row
      );
      setTableData(updatedTableData);
    } else {
      setTableData(tableData.filter((_, i) => i !== index));
      if (selectedTable === index) {
        setSelectedTable(null);
      }
    }
  };

  const handleTableSelect = (index) => {
    setSelectedTable(index);
  };

  const generateAIDescription = () => {
    const aiDescriptions = [
      "This table stores user information including unique identifiers, usernames, and email addresses.",
      "This table tracks user events with details such as event type and timestamp.",
      "A high-performance database for storing complex JSON data with UUID identifiers.",
      "This property is a unique identifier for each record in the table.",
      "Stores the username of the user, used for authentication and display purposes.",
      "The user's email address, used for communication and notifications.",
      "A unique identifier for each event recorded in the system.",
      "References the user associated with this event.",
      "Categorizes the type of event that occurred.",
      "Records the exact time when the event took place.",
      "A universally unique identifier for each record in the Hyperion database.",
      "Stores complex, semi-structured data in JSON format.",
      "Timestamp indicating when the record was created in the database.",
    ];

    const randomDescription = aiDescriptions[Math.floor(Math.random() * aiDescriptions.length)];
    setCurrentDescription(randomDescription);
  };

  const handleSearchChange = (e) => {
    setSearchText(e.target.value);
  };

  const handleDescriptionSearchChange = (e) => {
    setDescriptionSearchText(e.target.value);
  };

  const handlePropertySearchChange = (e) => {
    setPropertySearchText(e.target.value);
  };

  const toggleSortOrder = () => {
    let sortedData;
    if (sortOrder === 'asc') {
      sortedData = [...tableData].sort((a, b) =>
        a.databaseName.toLowerCase() > b.databaseName.toLowerCase() ? -1 : 1
      );
      setSortOrder('desc');
    } else {
      sortedData = [...tableData].sort((a, b) =>
        a.databaseName.toLowerCase() < b.databaseName.toLowerCase() ? -1 : 1
      );
      setSortOrder('asc');
    }
    setTableData(sortedData);
  };

  const toggleDescriptionSortOrder = () => {
    let sortedData;
    if (descriptionSortOrder === 'asc') {
      sortedData = [...tableData].sort((a, b) =>
        a.description.toLowerCase() > b.description.toLowerCase() ? -1 : 1
      );
      setDescriptionSortOrder('desc');
    } else {
      sortedData = [...tableData].sort((a, b) =>
        a.description.toLowerCase() < b.description.toLowerCase() ? -1 : 1
      );
      setDescriptionSortOrder('asc');
    }
    setTableData(sortedData);
  };

  const togglePropertySortOrder = () => {
    let sortedData;
    if (propertySortOrder === 'asc') {
      sortedData = [...tableData[selectedTable].properties].sort((a, b) =>
        a.name.toLowerCase() > b.name.toLowerCase() ? -1 : 1
      );
      setPropertySortOrder('desc');
    } else {
      sortedData = [...tableData[selectedTable].properties].sort((a, b) =>
        a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1
      );
      setPropertySortOrder('asc');
    }

    const updatedTableData = tableData.map((row, index) =>
      index === selectedTable ? { ...row, properties: sortedData } : row
    );
    setTableData(updatedTableData);
  };

  const handleCheckboxChange = (databaseName, isChecked) => {
    if (isChecked) {
      setSelectedSources([...selectedSources, databaseName]);
    } else {
      setSelectedSources(selectedSources.filter((name) => name !== databaseName));
    }
  };

  const handlePropertyCheckboxChange = (propertyName, isChecked) => {
    if (isChecked) {
      setSelectedProperties([...selectedProperties, propertyName]);
    } else {
      setSelectedProperties(selectedProperties.filter((name) => name !== propertyName));
    }
  };

  const handleDescriptionCheckboxChange = (description, isChecked) => {
    if (isChecked) {
      setSelectedDescriptions([...selectedDescriptions, description]);
    } else {
      setSelectedDescriptions(selectedDescriptions.filter((desc) => desc !== description));
    }
  };

  // Filter logic for the table
  const filteredTableData = tableData.filter(
    (row) =>
      (!selectedSources.length ||
        selectedSources.includes(row.databaseName)) &&
      row.databaseName.toLowerCase().includes(searchText.toLowerCase()) &&
      row.description.toLowerCase().includes(descriptionSearchText.toLowerCase())
  );

  // Filter logic for the dropdown menu
  const filteredMenuData = filteredTableData;

  // Filter logic for the properties
  const filteredProperties = selectedTable !== null
    ? tableData[selectedTable].properties.filter(
        (prop) =>
          (!selectedProperties.length ||
            selectedProperties.includes(prop.name)) &&
          prop.name.toLowerCase().includes(propertySearchText.toLowerCase())
      )
    : [];

  // Filter logic for the descriptions in the "Description" dropdown
  const filteredDescriptions = selectedTable !== null
    ? tableData[selectedTable].properties.filter(
        (prop) =>
          (!selectedDescriptions.length ||
            selectedDescriptions.includes(prop.description)) &&
          prop.description.toLowerCase().includes(descriptionSearchText.toLowerCase())
      )
    : [];

  return (
    <main className="flex-grow p-4">
      <Box mx="auto">
        <Text fontSize="md" color="gray.600" mb={6} align={'left'} fontFamily="Arial, sans-serif">
          This is the schema for the database. Adding a detailed description will help the AI provide more accurate responses, and we can assist in generating this description.
        </Text>

        <Flex>
          <TableContainer
            boxShadow="lg"
            borderRadius="lg"
            flex="1"
            mr={4}
            height="400px"
            overflowY="auto"
            width="50%"
            border="1px solid gray"
          >
            <Table variant="simple" size="md">
              <Thead bg="gray.100" position="sticky" top="0" zIndex="1">
                <Tr>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Tables
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={toggleSortOrder}
                              rightIcon={sortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                ref={inputRef}
                                placeholder="Filter by name.."
                                value={searchText}
                                onChange={handleSearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                onBlur={(e) => {
                                  if (e.relatedTarget) {
                                    e.preventDefault();
                                    inputRef.current.focus();
                                  }
                                }}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredMenuData.map((row, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedSources.includes(row.databaseName)}
                                onChange={(e) => handleCheckboxChange(row.databaseName, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {row.databaseName}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Description
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={toggleDescriptionSortOrder}
                              rightIcon={descriptionSortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                ref={inputRef}
                                placeholder="Filter by description.."
                                value={descriptionSearchText}
                                onChange={handleDescriptionSearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                onBlur={(e) => {
                                  if (e.relatedTarget) {
                                    e.preventDefault();
                                    inputRef.current.focus();
                                  }
                                }}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredDescriptions.map((prop, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedDescriptions.includes(prop.description)}
                                onChange={(e) => handleDescriptionCheckboxChange(prop.description, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {prop.description || 'No Description'}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif"></Th>
                </Tr>
              </Thead>
              <Tbody>
                {filteredTableData.map((row, index) => (
                  <Tr
                    key={index}
                    _hover={{ bg: 'gray.50', '.action-icons': { opacity: 1 } }}
                    transition="all 0.2s"
                    onClick={() => handleTableSelect(index)}
                    bg={selectedTable === index ? 'blue.100' : 'inherit'}
                    cursor="pointer"
                    fontFamily="Arial, sans-serif"
                  >
                    <Td fontWeight="medium" fontFamily="Arial, sans-serif">{row.databaseName}</Td>
                    <Td fontFamily="Arial, sans-serif">
                      <Button
                        size="sm"
                        variant="link"
                        color={'gray.600'}
                        onClick={(e) => {
                          e.stopPropagation();
                          openModal(index);
                        }}
                        _hover={{ bg: 'transparent' }}
                        _focus={{ boxShadow: 'none' }}
                        fontFamily="Arial, sans-serif"
                      >
                        {row.description || '+ Add Description'}
                      </Button>
                    </Td>
                    <Td textAlign="right" fontFamily="Arial, sans-serif">
                      <HStack
                        spacing={2}
                        justify="flex-end"
                        className="action-icons"
                        opacity={0}
                        transition="opacity 0.2s"
                      >
                        <IconButton
                          size="sm"
                          icon={<RepeatIcon />}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleRefresh(index);
                          }}
                          aria-label="Refresh"
                          fontFamily="Arial, sans-serif"
                        />
                        <IconButton
                          size="sm"
                          icon={<DeleteIcon />}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDelete(index);
                          }}
                          aria-label="Delete"
                          color="red.500"
                          fontFamily="Arial, sans-serif"
                        />
                      </HStack>
                    </Td>
                  </Tr>
                ))}
              </Tbody>
            </Table>
          </TableContainer>

          <TableContainer
            boxShadow="lg"
            borderRadius="lg"
            flex="1"
            height="400px"
            overflowY="auto"
            width="50%"
            border="1px solid gray"
          >
            <Table variant="simple" size="md">
              <Thead bg="gray.100" position="sticky" top="0" zIndex="1">
                <Tr>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Properties
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={togglePropertySortOrder}
                              rightIcon={propertySortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                ref={inputRef}
                                placeholder="Filter by property name.."
                                value={propertySearchText}
                                onChange={handlePropertySearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                onBlur={(e) => {
                                  if (e.relatedTarget) {
                                    e.preventDefault();
                                    inputRef.current.focus();
                                  }
                                }}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredProperties.map((prop, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedProperties.includes(prop.name)}
                                onChange={(e) => handlePropertyCheckboxChange(prop.name, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {prop.name}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif">
                    <HStack spacing={4}>
                      <Menu closeOnSelect={false} autoSelect={false}>
                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />} variant="ghost" size="sm">
                          Description
                        </MenuButton>
                        <MenuList maxH="300px" overflowY="auto">
                          <MenuItem>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={toggleDescriptionSortOrder}
                              rightIcon={descriptionSortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUpAlt />}
                            />
                            <InputGroup>
                              <InputLeftElement pointerEvents="none">
                                <SearchIcon color="gray.400" />
                              </InputLeftElement>
                              <Input
                                ref={inputRef}
                                placeholder="Filter by description.."
                                value={descriptionSearchText}
                                onChange={handleDescriptionSearchChange}
                                mb={2}
                                autoFocus
                                onClick={(e) => e.stopPropagation()}
                                onBlur={(e) => {
                                  if (e.relatedTarget) {
                                    e.preventDefault();
                                    inputRef.current.focus();
                                  }
                                }}
                                fontFamily="Arial, sans-serif"
                              />
                            </InputGroup>
                          </MenuItem>
                          <MenuDivider />
                          {filteredDescriptions.map((prop, index) => (
                            <MenuItem key={index} fontFamily="Arial, sans-serif">
                              <Checkbox
                                isChecked={selectedDescriptions.includes(prop.description)}
                                onChange={(e) => handleDescriptionCheckboxChange(prop.description, e.target.checked)}
                                fontFamily="Arial, sans-serif"
                              >
                                {prop.description || 'No Description'}
                              </Checkbox>
                            </MenuItem>
                          ))}
                        </MenuList>
                      </Menu>
                    </HStack>
                  </Th>
                  <Th fontSize="md" fontFamily="Arial, sans-serif"></Th>
                </Tr>
              </Thead>
              <Tbody>
                {filteredProperties.map((prop, index) => (
                  <Tr
                    key={index}
                    _hover={{ bg: 'gray.50', '.action-icons': { opacity: 1 } }}
                    transition="all 0.2s"
                    fontFamily="Arial, sans-serif"
                  >
                    <Td fontWeight="medium" fontFamily="Arial, sans-serif">{prop.name}</Td>
                    <Td fontFamily="Arial, sans-serif">
                      <Button
                        size="sm"
                        variant="link"
                        color={'gray.600'}
                        onClick={(e) => {
                          e.stopPropagation();
                          openModal(index, true);
                        }}
                        _hover={{ bg: 'transparent' }}
                        _focus={{ boxShadow: 'none' }}
                        fontFamily="Arial, sans-serif"
                      >
                        {prop.description || '+ Add Description'}
                      </Button>
                    </Td>
                    <Td textAlign="right" fontFamily="Arial, sans-serif">
                      <HStack
                        spacing={2}
                        justify="flex-end"
                        className="action-icons"
                        opacity={0}
                        transition="opacity 0.2s"
                      >
                        <IconButton
                          size="sm"
                          icon={<RepeatIcon />}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleRefresh(index, true);
                          }}
                          aria-label="Refresh"
                          fontFamily="Arial, sans-serif"
                        />
                        <IconButton
                          size="sm"
                          icon={<DeleteIcon />}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDelete(index, true);
                          }}
                          aria-label="Delete"
                          color="red.500"
                          fontFamily="Arial, sans-serif"
                        />
                      </HStack>
                    </Td>
                  </Tr>
                ))}
              </Tbody>
            </Table>
          </TableContainer>
        </Flex>

        <Modal isOpen={isModalOpen} onClose={closeModal}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader fontFamily="Arial, sans-serif">Update Description</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <Textarea
                value={currentDescription}
                onChange={(e) => setCurrentDescription(e.target.value)}
                placeholder="Enter description"
                fontFamily="Arial, sans-serif"
              />
            </ModalBody>

            <ModalFooter>
              <HStack spacing={4} w="full" justify="space-between">
                <Tooltip label="Generate description using AI" aria-label="A tooltip" hasArrow placement="bottom-start">
                  <Button
                    onClick={generateAIDescription}
                    leftIcon={<Image src="/ai-logo.png" boxSize="30px" alt="AI Icon" />}
                    bg="transparent"
                    _hover={{ bg: 'transparent' }}
                    _active={{ bg: 'transparent' }}
                    fontFamily="Arial, sans-serif"
                  />
                </Tooltip>
                <div>
                  <Button variant="ghost" onClick={closeModal} mr={5} fontFamily="Arial, sans-serif">
                    Cancel
                  </Button>
                  <Button bg="black" color="white" _hover={{ bg: 'gray.800' }} onClick={saveDescription} fontFamily="Arial, sans-serif">
                    Save
                  </Button>
                </div>
              </HStack>
            </ModalFooter>
          </ModalContent>
        </Modal>
      </Box>
    </main>
  );
};

export default AnotherPage;
